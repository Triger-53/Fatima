-- ========== Sessions Table ==========
create table if not exists public.sessions (
  id bigint generated by default as identity not null,
  created_at timestamptz not null default now(),
  appointment_id bigint not null,
  user_id uuid not null, -- patient user
  doctor_id uuid not null, -- doctor user (assumes doctors also exist in auth.users)
  title text,
  duration integer, -- minutes
  scheduled_at timestamptz, -- unified datetime instead of date+time split
  meeting_provider text check (meeting_provider in ('zoom','google')),
  meeting_link text,
  status text check (status in ('scheduled','completed','cancelled')) default 'scheduled',
  constraint sessions_pkey primary key (id),
  constraint sessions_user_id_fkey foreign key (user_id)
    references auth.users (id) on update cascade on delete cascade,
  constraint sessions_doctor_id_fkey foreign key (doctor_id)
    references auth.users (id) on update cascade on delete cascade,
  constraint sessions_appointment_id_fkey foreign key (appointment_id)
    references public."Appointment" (id) on update cascade on delete cascade
);