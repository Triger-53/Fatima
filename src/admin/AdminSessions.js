import React, { useState, useEffect } from 'react';
import { supabase } from '../supabase';
import { slotManager } from '../utils/slotManager';

// DEV NOTE: This component requires a `sessions` table in the database.
// A migration is needed to create this table with the following columns:
// - id (bigint, primary key, generated by default as identity)
// - user_id (uuid, foreign key to auth.users.id)
// - title (text)
// - duration (integer)
// - date (date)
// - time (time)
// - meet_link (text, nullable)
// - created_at (timestamp with time zone)

const AdminSessions = () => {
    const [users, setUsers] = useState([]);
    const [selectedUser, setSelectedUser] = useState('');
    const [title, setTitle] = useState('');
    const [duration, setDuration] = useState(30);
    const [startDate, setStartDate] = useState('');
    const [endDate, setEndDate] = useState('');
    const [time, setTime] = useState('');
    const [daysOfWeek, setDaysOfWeek] = useState({
        monday: false,
        tuesday: false,
        wednesday: false,
        thursday: false,
        friday: false,
        saturday: false,
        sunday: false,
    });
    const [forceBooking, setForceBooking] = useState(false);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');
    const [success, setSuccess] = useState('');

    useEffect(() => {
        const fetchUsers = async () => {
            // Fetch users from the user_dashboard table
            const { data, error } = await supabase.from('user_dashboard').select('user_id, email');
            if (error) {
                console.error('Error fetching users:', error);
                setError('Could not fetch users. Please check the console for details.');
            } else {
                // Map to a consistent format
                const formattedUsers = data.map(u => ({ id: u.user_id, email: u.email }));
                setUsers(formattedUsers);
            }
        };
        fetchUsers();
    }, []);

    const handleDayOfWeekChange = (day) => {
        setDaysOfWeek(prev => ({ ...prev, [day]: !prev[day] }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!selectedUser || !title) {
            setError('Please select a user and provide a title.');
            return;
        }
        setLoading(true);
        setError('');
        setSuccess('');

        const user = users.find(u => u.id === selectedUser);
        if (!user) {
            setError('Selected user not found.');
            setLoading(false);
            return;
        }
        const patientEmail = user.email;

        const createdSessions = [];

        const dayMapping = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"];

        let currentDate = new Date(startDate);
        let lastDate = new Date(endDate);

        while (currentDate <= lastDate) {
            const dayOfWeek = dayMapping[currentDate.getDay()];
            if (daysOfWeek[dayOfWeek]) {
                const date = currentDate.toISOString().split('T')[0];
                try {
                    // 1. Check if the slot is free
                    if (!forceBooking) {
                        const isFree = await slotManager.isTimeSlotCompletelyFree(date, time);
                        if (!isFree) {
                            throw new Error(`Slot on ${date} at ${time} is already booked.`);
                        }
                    }

                    // 2. Create the session in Supabase to get the ID
                    const { data: sessionData, error: sessionError } = await supabase
                        .from('sessions')
                        .insert({ user_id: selectedUser, title, duration, date, time })
                        .select()
                        .single();

                    if (sessionError) {
                        throw new Error(`Failed to create session in database: ${sessionError.message}`);
                    }

                    // 3. Create Google Calendar event
                    const startDateTime = new Date(`${date}T${time}`).toISOString();
                    const endDateTime = new Date(new Date(`${date}T${time}`).getTime() + duration * 60000).toISOString();

                    const response = await fetch('http://localhost:3001/create-meeting', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ patientEmail, startDateTime, endDateTime }),
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(`Failed to create Google Meet link: ${errorData.error || 'Unknown error'}`);
                    }

                    const { meetLink } = await response.json();

                    // 4. Update the session with the Meet link
                    const { error: updateError } = await supabase
                        .from('sessions')
                        .update({ meet_link: meetLink })
                        .eq('id', sessionData.id);

                    if (updateError) {
                        console.error('Failed to update session with meet link:', updateError);
                        throw new Error('Session created, but failed to save the Google Meet link.');
                    }

                    createdSessions.push({ ...sessionData, meetLink });

                } catch (error) {
                    setError(`Error for session on ${date}: ${error.message}`);
                    break;
                }
            }
            currentDate.setDate(currentDate.getDate() + 1);
        }

        if (createdSessions.length > 0) {
            setSuccess(`${createdSessions.length} session(s) created successfully with Google Meet links!`);
            // Reset form
            setSelectedUser('');
            setTitle('');
            setDuration(30);
            setStartDate('');
            setEndDate('');
            setTime('');
            setDaysOfWeek({ monday: false, tuesday: false, wednesday: false, thursday: false, friday: false, saturday: false, sunday: false });
        }

        setLoading(false);
    };

    return (
        <div className="p-6">
            <h1 className="text-2xl font-bold mb-4">Manage Sessions</h1>
            {error && <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">{error}</div>}
            {success && <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">{success}</div>}
            <form onSubmit={handleSubmit}>
                <div className="mb-4">
                    <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="user">
                        Select User
                    </label>
                    <select
                        id="user"
                        value={selectedUser}
                        onChange={(e) => setSelectedUser(e.target.value)}
                        className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                    >
                        <option value="">Select a user</option>
                        {users.map(user => (
                            <option key={user.id} value={user.id}>{user.email}</option>
                        ))}
                    </select>
                </div>
                <div className="mb-4">
                    <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="title">
                        Session Title
                    </label>
                    <input
                        id="title"
                        type="text"
                        value={title}
                        onChange={(e) => setTitle(e.target.value)}
                        className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                    />
                </div>
                <div className="mb-4">
                    <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="duration">
                        Duration (in minutes)
                    </label>
                    <input
                        id="duration"
                        type="number"
                        value={duration}
                        onChange={(e) => setDuration(e.target.value)}
                        className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                    />
                </div>
                <div className="flex gap-4 mb-4">
                    <div className="w-1/3">
                        <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="startDate">
                            Start Date
                        </label>
                        <input
                            id="startDate"
                            type="date"
                            value={startDate}
                            onChange={(e) => setStartDate(e.target.value)}
                            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                        />
                    </div>
                    <div className="w-1/3">
                        <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="endDate">
                            End Date
                        </label>
                        <input
                            id="endDate"
                            type="date"
                            value={endDate}
                            onChange={(e) => setEndDate(e.target.value)}
                            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                        />
                    </div>
                    <div className="w-1/3">
                        <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="time">
                            Time
                        </label>
                        <input
                            id="time"
                            type="time"
                            value={time}
                            onChange={(e) => setTime(e.target.value)}
                            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                        />
                    </div>
                </div>
                <div className="mb-4">
                    <label className="block text-gray-700 text-sm font-bold mb-2">
                        Select Days of the Week
                    </label>
                    <div className="flex gap-4">
                        {Object.keys(daysOfWeek).map((day) => (
                            <label key={day} className="flex items-center capitalize">
                                <input
                                    type="checkbox"
                                    checked={daysOfWeek[day]}
                                    onChange={() => handleDayOfWeekChange(day)}
                                    className="form-checkbox"
                                />
                                <span className="ml-2 text-gray-700">{day}</span>
                            </label>
                        ))}
                    </div>
                </div>
                <button
                    type="submit"
                    disabled={loading}
                    className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                >
                    {loading ? 'Creating Sessions...' : 'Create Sessions'}
                </button>
            </form>
        </div>
    );
};

export default AdminSessions;